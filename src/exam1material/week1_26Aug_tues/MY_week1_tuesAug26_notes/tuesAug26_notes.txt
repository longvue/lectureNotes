CIS 301. Logical Foundations of Programming.

Julie Thornton.

What is this class?
- logical reasoning (basics, puzzles)
- writing formal statements (propositional and predicate logic)
- proofs (why?)
- reasoning about code
    - analyzing what we know
    - identifying equivalent programs
    - simplifying programs
    - formally describing what programs do
- basics of proving correctness of programs (why?)


Syllabus

Canvas setup - weekly class material

Ed Discussion

How to take notes

Attendance/practice quizzes


///////////////////////////////////////////////////////

HW 0 - due Thursday, August 28
    --> see how to do it

HW 1 - due Tuesday, September 2

////////////////////////////////////////////////////////

Taking a step back...what is logic?

- analysis of an argument according to a set of rules
- given a set of premises (and sometimes a conclusion)


- a VALID conclusion is one that is always true
    anytime all the premises are true


Note that the premises might make no sense!


////////////////////////////////////////////////////////

Premise 1: If a person wears a red shirt,
    then they don't like pizza.

Premise 2: Fred is wearing a red shirt.

Conclusion: Fred doesn't like pizza.



--> Is this a valid argument? 



(is there a hidden assumption we're making about Fred?)





////////////////////////////////////////////////////////

Logical Arguments with "OR"
    - can be ambiguous! Why?


I order fries or I order chips.



- in English, how do we interpret "or"? 



- in programming? 




"Or" in THIS class: 





/////////////////////////////

Premise 1: I'll fold the laundry or I'll do the dishes.
Premise 2: I don't fold the laundry.

--> What can I conclude? 




//////////////////////////////////////////////////////////

num = 5;
if (num < 4 || x >= 10) {
    statement;
}



Suppose we know "statement" is executed
--> What can we conclude? 





/////////////////////////////////////////////////////////

x = 9;
if (num < 4 || x >= 10) {
    if (num > 2) {
        statement;
    }
}



Suppose we know "statement" is executed
--> What can we conclude? num <4 and >2 and  num is an int. => num = 3



////////////////////////////////////////////////////////

What rule are we seeing with an "or" statement,
where we know that one of the statements is NOT true?

if one side is not true, the other is 




////////////////////////////////////////////////////////

Logical Arguments with "IF/THEN" (aka "implies" -> )

If it is raining, then I will get wet.
It is raining.

--> What can I conclude? 




How to write with -> symbol?
    p: it is raining
    q: I will get wet
    p -> q (p implies q)


////////////////////////////////////////////////////////

When we have an "if/then" statement,
and we know that the "if" part is true?

    ...what can we always conclude?
    the then part is true (modus ponens)




/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I am late for class.

--> What can I conclude?
    nothing





/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I hear my alarm.

--> What can I conclude? nothing








/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I'm not late for class.

--> What can I conclude? I did hear my alarm


Contrapositive

IF I don't hear my alarm THEN I will be late for class.

is equivalent to:
if i am not late for class, then i did hear my alarm

p->q is equivalent to !q->!p


if (condition) {
    statement
}

--> what if we know statement is NOT executed? 

condition was false



If p Then q

... is equivalent to?


////////////////////////////////////////////////////////

More if/then logic in programming.


if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. What do we know?

nothing, y could be 17 before


/////////////////////////////////////////////////////////

y = 10;
if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. Can we conclude anything now?

num < 4 || x >= 10 was true



//////////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is NOT 17 here. What do we know?

condition is false

///////////////////////////////////////////////////////

Attendance/practice quiz in Canvas


///////////////////////////////////////////////////////

Logic puzzles.

The puzzles in this lecture are from or inspired by:
"What is the Name of This Book?", by Raymond Smullyan

///////////////////////////////////////////////////////

The island of Knights and Knaves.
Each inhabitant is either a knight or a knave.

Knights ALWAYS tell the truth, and knaves ALWAYS lie.

///////////////////////////////////////////////////////

Who can say, "I'm a knave"? 

Can a knight? would be a lie
Can a knave? would be the truth



//////////////////////////////////////////////////////////

You see two inhabitants, Eve and Fred.

Eve says, "I am a knave or Fred is a knight."



What are Eve and Fred? both knights

suppose eve is a knight -> for her statement to be true fred has to be a knight
suppose eve is a knave -> eve cannot be a knave


(what does the "or" mean?) inclusive



Her WHOLE statement is the or -- we only need to whole statement
to be true, not each individual piece.


/////////////////////////////////////////////////////////

You see two different inhabitants, Ava and Bob.

Ava says that Bob is a knave.
Bob says, "Neither Ava nor I are knaves."

bob rewrite: "ava and i are knights"


What are Ava and Bob?

suppose ava is a knight: -> bob must be a knave
    bobs starement is correctly false

suppose ava is a knave: -> bob must be a knight, however bob cannot be telling the truth then





What does "neither" mean?
    When is Bob's statement true? both knights
    When is Bob's statement false? one or both is knave




////////////////////////////////////////////////////////

Homework 0: due Thursday, August 28
    - get Sireum + GitHub ready (do this now!)
    - post something in Ed Discussion
    - come to office hours or post in Ed Discussion if
        you need software setup help!

Homework 1: due Tuesday, September 2
    - first page of homework is logical reasoning
        (what we did today)
    - second page is logic puzzles

Next: finish logic puzzles, start truth tables
